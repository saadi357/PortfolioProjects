SELECT *
FROM `first-test-project-ftp1.covid_data_alex_the_analyst.CovidDeaths`
WHERE continent is not null
order by 3,4;




## Select data that we are going to be using

SELECT location, date, total_cases, new_cases, total_deaths, population
FROM `first-test-project-ftp1.covid_data_alex_the_analyst.CovidDeaths`
WHERE continent is not null
order by 1,2;




## Looking at the Total Cases vs Total Deaths
## Shows likelihood of dying if you contract covid in your country

SELECT location, date, total_cases, total_deaths, (total_deaths/total_cases)*100 AS DeathPercentage
FROM `first-test-project-ftp1.covid_data_alex_the_analyst.CovidDeaths`
WHERE location like '%States%'
and continent is not null
order by 1,2;




## Looking at the Total Cases vs Population
## Shows what percentage of population got Covid

SELECT location, date, population, total_cases, (total_cases/population)*100 AS PercentPopulationInfected
FROM `first-test-project-ftp1.covid_data_alex_the_analyst.CovidDeaths`
WHERE continent is not null
## WHERE location like '%States%'
order by 1,2;




## Looking at Countries with Higehest Infection Rate compared to Population

SELECT location, population, MAX(total_cases) AS HighestInfectionCount, MAX((total_cases/population)*100) AS PercentPopulationInfected
FROM `first-test-project-ftp1.covid_data_alex_the_analyst.CovidDeaths`
WHERE continent is not null
## WHERE location like '%States%'
GROUP BY location, population
order by PercentPopulationInfected desc;




## Showing Countries with the Highest Death per Population

SELECT location, max(cast(total_deaths as int)) AS TotalDeathCount
FROM `first-test-project-ftp1.covid_data_alex_the_analyst.CovidDeaths`
WHERE continent is not null
## WHERE location like '%States%'
GROUP BY location
order by TotalDeathCount desc;





##  LET'S BREAK THINGS DOWN BY CONTINENT

## Showing continents with the Highest Death Count per Population

SELECT continent, max(cast(total_deaths as int)) AS TotalDeathCount
FROM `first-test-project-ftp1.covid_data_alex_the_analyst.CovidDeaths`
WHERE continent is not null
## WHERE location like '%States%'
GROUP BY continent
order by TotalDeathCount desc;




## GLOBAL NUMBERS

SELECT SUM(new_cases) as total_cases, SUM(new_deaths) as total_deaths, SUM(new_deaths)/SUM(new_cases)*100 AS DeathPercentage
FROM `first-test-project-ftp1.covid_data_alex_the_analyst.CovidDeaths`
##WHERE location like '%States%'
WHERE continent is not null
## GROUP BY date
order by 1,2;




## Looking at Total Population Vs Vaccinations

SELECT dea.continent, dea.location, dea.date, population, vac.new_vaccinations
, SUM(vac.new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) AS RollingPeopleVaccinated
## , (RollingPeopleVaccinated/population)*100
FROM `first-test-project-ftp1.covid_data_alex_the_analyst.CovidDeaths` dea
JOIN `first-test-project-ftp1.covid_data_alex_the_analyst.CovidVaccinations` vac
  ON dea.location = vac.location
  AND dea.date = vac.date
WHERE dea.continent is not null
ORDER BY 2,3;




## TEMP Table (every function works except for INSERT INTO)
## INSERT fuction is not working because DML queries are not allowed in the free tier. Set up a billing account to remove this restriction. at [12:1]

DROP TABLE IF exists covid_data_alex_the_analyst.PercentPopulationVaccinated;
CREATE TABLE covid_data_alex_the_analyst.PercentPopulationVaccinated
(
Continent STRING,
Location STRING,
Date datetime,
Population numeric,
New_Vaccinations numeric,
RollingPeopleVaccinated numeric,
);

INSERT INTO covid_data_alex_the_analyst.PercentPopulationVaccinated
SELECT dea.continent, dea.location, dea.date, population, vac.new_vaccinations
, SUM(vac.new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) AS RollingPeopleVaccinated
## , (RollingPeopleVaccinated/population)*100
FROM `first-test-project-ftp1.covid_data_alex_the_analyst.CovidDeaths` dea
JOIN `first-test-project-ftp1.covid_data_alex_the_analyst.CovidVaccinations` vac
  ON dea.location = vac.location
  AND dea.date = vac.date
WHERE dea.continent is not null;
## ORDER BY 2,3

SELECT *, (RollingPeopleVaccinated/Population)*100 
FROM covid_data_alex_the_analyst.PercentPopulationVaccinated;




## Creating View to store data for later visualizations

CREATE VIEW covid_data_alex_the_analyst.ppv AS            ## ppv is used to create a view of PercentPeopleVaccinated
SELECT dea.continent, dea.location, dea.date, population, vac.new_vaccinations
, SUM(vac.new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) AS RollingPeopleVaccinated
## , (RollingPeopleVaccinated/population)*100
FROM `first-test-project-ftp1.covid_data_alex_the_analyst.CovidDeaths` dea
JOIN `first-test-project-ftp1.covid_data_alex_the_analyst.CovidVaccinations` vac
  ON dea.location = vac.location
  AND dea.date = vac.date
WHERE dea.continent is not null;
## ORDER BY 2,3

SELECT *
FROM covid_data_alex_the_analyst.ppv;


